<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Tetris.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Tetris.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Wed Jan 22 17:48:36 2025
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; start_game &rArr;  start_game (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2a]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[15]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">ADC0_IRQHandler</a><BR>
 <LI><a href="#[a5]">start_game</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a5]">start_game</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">ADC0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[16]">CMP0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[1f]">DAC0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[6]">DMA0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[7]">DMA1_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[8]">DMA2_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[9]">DMA3_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[b]">FTFA_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[e]">I2C0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[d]">LLW_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[22]">LPTimer_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[c]">LVD_LVW_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[21]">MCG_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[1c]">PIT_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[24]">PORTA_IRQHandler</a> from klaw.o(.text.PORTA_IRQHandler) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[25]">PORTB_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[1b]">RTC_Seconds_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[a]">Reserved20_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[f]">Reserved25_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[11]">Reserved27_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[13]">Reserved29_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[14]">Reserved30_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[19]">Reserved35_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[1d]">Reserved39_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[1e]">Reserved40_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[23]">Reserved45_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[10]">SPI0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from klaw.o(.text.SysTick_Handler) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_mkl05z4.o(.text.SystemInit) referenced from startup_mkl05z4.o(.text)
 <LI><a href="#[17]">TPM0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[18]">TPM1_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[20]">TSI0_IRQHandler</a> from tsi.o(.text.TSI0_IRQHandler) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(RESET)
 <LI><a href="#[27]">__main</a> from __main.o(!!!main) referenced from startup_mkl05z4.o(.text)
 <LI><a href="#[29]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[28]">_snputc</a> from _snputc.o(.text) referenced from noretval__2snprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[be]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[bf]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[45]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[30]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[31]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[33]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[39]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[34]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[c4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[3e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d6]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[d7]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[d8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[d9]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[da]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[db]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[dc]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[dd]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[36]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[38]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[de]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; start_game &rArr;  start_game (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[51]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[e0]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b7]"></a>rand</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawn_block_random
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[b]"></a>FTFA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>LLW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LPTimer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Reserved25_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Reserved27_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>Reserved29_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Reserved30_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Reserved35_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Reserved40_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TPM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TPM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mkl05z4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[41]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, noretval__2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_high_scores
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_score
</UL>

<P><STRONG><a name="[44]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[32]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[4a]"></a>srand</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawn_block_random
</UL>

<P><STRONG><a name="[35]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_memset4</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset4
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_fill_display
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[4d]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[e2]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_game
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[e4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[43]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[28]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2snprintf.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e7]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawn_block_random
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_idivmod</STRONG> (Thumb, 472 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[48]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[37]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[ea]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>Klaw_Init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, klaw.o(.text.Klaw_Init))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
</UL>

<P><STRONG><a name="[ec]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>Klaw_S2_4_Int</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, klaw.o(.text.Klaw_S2_4_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Klaw_S2_4_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
</UL>

<P><STRONG><a name="[24]"></a>PORTA_IRQHandler</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, klaw.o(.text.PORTA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PORTA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_S4_press
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_S3_press
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_S2_press
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_S4_press
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_S3_press
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_S2_press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, klaw.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_mkl05z4.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>TSI0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tsi.o(.text.TSI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSI0_IRQHandler &rArr; change_electrode
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_electrode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TSI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tsi.o(.text.TSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TSI_Init &rArr; self_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_calibration
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
</UL>

<P><STRONG><a name="[67]"></a>TSI_ReadSlider</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tsi.o(.text.TSI_ReadSlider))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSI_ReadSlider
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_touch_input
</UL>

<P><STRONG><a name="[61]"></a>change_electrode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tsi.o(.text.change_electrode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = change_electrode
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI0_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>check_collision</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, area.o(.text.check_collision))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = check_collision
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawn_block_random
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_block
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[69]"></a>choose_level</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, menu.o(.text.choose_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = choose_level &rArr; oled_draw_string &rArr; oled_draw_char &rArr; oled_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_min_gravitation
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_level
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gravitation
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_S4_press
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_S3_press
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_S2_press
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_S4_press
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_S3_press
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_S2_press
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_update_screen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_string
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear_display
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oled_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[71]"></a>clear_lines</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, area.o(.text.clear_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clear_lines
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_score
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_game_area
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_score
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_level
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_game_area
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[6a]"></a>clear_oled_buffer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, oled.o(.text.clear_oled_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clear_oled_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_oled_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_game
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over_screen
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_game_area
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_update_screen
</UL>

<P><STRONG><a name="[78]"></a>display_high_scores</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, menu.o(.text.display_high_scores))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = display_high_scores &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_score
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_string
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over_screen
</UL>

<P><STRONG><a name="[7a]"></a>display_score</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, area.o(.text.display_score))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = display_score &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_score
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_last_displayed_score
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_score
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_level
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_last_displayed_score
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_string
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_game_area
</UL>

<P><STRONG><a name="[7d]"></a>draw_game_area</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, area.o(.text.draw_game_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = draw_game_area &rArr; display_score &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_score
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_update_screen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_pixel
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oled_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[7f]"></a>game_loop</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, area.o(.text.game_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = game_loop &rArr; game_over_screen &rArr; display_high_scores &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawn_block_random
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_game
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_block
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_block
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_blocks
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_touch_input
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_3
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slider_value
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gravitation
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_game_over
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_S2_press
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over_screen
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_game_area
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lines
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_update_screen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_string
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear_display
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oled_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_game
</UL>

<P><STRONG><a name="[8d]"></a>game_over_screen</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, menu.o(.text.game_over_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = game_over_screen &rArr; display_high_scores &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_high_scores
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_high_scores
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sec_OK
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_c_time
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sec_OK
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_c_time
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_score
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_update_screen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_string
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear_display
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oled_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[a8]"></a>get_Font8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, font.o(.text.get_Font8))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_string
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_char
</UL>

<P><STRONG><a name="[5b]"></a>get_S2_press</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, klaw.o(.text.get_S2_press))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
</UL>

<P><STRONG><a name="[5d]"></a>get_S3_press</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, klaw.o(.text.get_S3_press))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_3
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
</UL>

<P><STRONG><a name="[59]"></a>get_S4_press</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, klaw.o(.text.get_S4_press))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
</UL>

<P><STRONG><a name="[9b]"></a>get_TETRIS_BLOCK_I</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, blocks.o(.text.get_TETRIS_BLOCK_I))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_blocks
</UL>

<P><STRONG><a name="[9f]"></a>get_TETRIS_BLOCK_J</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, blocks.o(.text.get_TETRIS_BLOCK_J))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_blocks
</UL>

<P><STRONG><a name="[9e]"></a>get_TETRIS_BLOCK_L</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, blocks.o(.text.get_TETRIS_BLOCK_L))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_blocks
</UL>

<P><STRONG><a name="[9c]"></a>get_TETRIS_BLOCK_O</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, blocks.o(.text.get_TETRIS_BLOCK_O))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_blocks
</UL>

<P><STRONG><a name="[a0]"></a>get_TETRIS_BLOCK_S</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, blocks.o(.text.get_TETRIS_BLOCK_S))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_blocks
</UL>

<P><STRONG><a name="[9d]"></a>get_TETRIS_BLOCK_T</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, blocks.o(.text.get_TETRIS_BLOCK_T))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_blocks
</UL>

<P><STRONG><a name="[a1]"></a>get_TETRIS_BLOCK_Z</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, blocks.o(.text.get_TETRIS_BLOCK_Z))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_blocks
</UL>

<P><STRONG><a name="[90]"></a>get_c_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, klaw.o(.text.get_c_time))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over_screen
</UL>

<P><STRONG><a name="[72]"></a>get_game_area</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, area.o(.text.get_game_area))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lines
</UL>

<P><STRONG><a name="[83]"></a>get_game_over</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.get_game_over))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[8c]"></a>get_gravitation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text.get_gravitation))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_3
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[79]"></a>get_high_score</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text.get_high_score))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_high_scores
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_high_scores
</UL>

<P><STRONG><a name="[b3]"></a>get_initialized</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.get_initialized))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawn_block_random
</UL>

<P><STRONG><a name="[7b]"></a>get_last_displayed_score</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.get_last_displayed_score))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_score
</UL>

<P><STRONG><a name="[98]"></a>get_last_slider_position</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.get_last_slider_position))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_touch_input
</UL>

<P><STRONG><a name="[75]"></a>get_level</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text.get_level))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_score
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lines
</UL>

<P><STRONG><a name="[95]"></a>get_min_gravitation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text.get_min_gravitation))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_4
</UL>

<P><STRONG><a name="[b5]"></a>get_next_random_index</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.get_next_random_index))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawn_block_random
</UL>

<P><STRONG><a name="[af]"></a>get_oled_buffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, oled.o(.text.get_oled_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_update_screen
</UL>

<P><STRONG><a name="[ba]"></a>get_random_index</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.get_random_index))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawn_block_random
</UL>

<P><STRONG><a name="[74]"></a>get_score</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.get_score))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over_screen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_score
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lines
</UL>

<P><STRONG><a name="[91]"></a>get_sec_OK</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, klaw.o(.text.get_sec_OK))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over_screen
</UL>

<P><STRONG><a name="[97]"></a>get_slider</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.get_slider))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_touch_input
</UL>

<P><STRONG><a name="[8a]"></a>get_slider_value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.get_slider_value))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[aa]"></a>gpio_clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text.gpio_clear))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_send_data
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_send_command
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[a9]"></a>gpio_init_pin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(.text.gpio_init_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_init_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[ab]"></a>gpio_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text.gpio_set))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_send_data
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_send_command
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[85]"></a>handle_button_input_2</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, area.o(.text.handle_button_input_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = handle_button_input_2 &rArr; rotate_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_S2_press
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_block
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_block
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_S2_press
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[86]"></a>handle_button_input_3</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, area.o(.text.handle_button_input_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = handle_button_input_3
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gravitation
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_S3_press
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gravitation
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_S3_press
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[87]"></a>handle_button_input_4</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, area.o(.text.handle_button_input_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = handle_button_input_4
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gravitation
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_S4_press
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_min_gravitation
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_S4_press
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[84]"></a>handle_touch_input</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, area.o(.text.handle_touch_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = handle_touch_input &rArr; move_block &rArr; check_collision
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slider_value
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slider
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_last_slider_position
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_block
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slider
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_last_slider_position
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_ReadSlider
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[81]"></a>initialize_blocks</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, area.o(.text.initialize_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initialize_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TETRIS_BLOCK_Z
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TETRIS_BLOCK_T
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TETRIS_BLOCK_S
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TETRIS_BLOCK_O
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TETRIS_BLOCK_L
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TETRIS_BLOCK_J
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TETRIS_BLOCK_I
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[80]"></a>introduction</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, menu.o(.text.introduction))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = introduction &rArr; oled_init &rArr; oled_clear_display &rArr; oled_fill_display &rArr; oled_update_screen &rArr; oled_send_data &rArr; spi_master_write
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sec_OK
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_c_time
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sec_OK
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_c_time
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Klaw_S2_4_Int
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Klaw_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_update_screen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_string
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear_display
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oled_buffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[89]"></a>lock_block</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, area.o(.text.lock_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lock_block
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_game_area
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[3b]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = main &rArr; start_game &rArr;  start_game (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_game
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8b]"></a>move_block</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, area.o(.text.move_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = move_block &rArr; check_collision
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_touch_input
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[6b]"></a>oled_clear_display</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, oled.o(.text.oled_clear_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = oled_clear_display &rArr; oled_fill_display &rArr; oled_update_screen &rArr; oled_send_data &rArr; spi_master_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_fill_display
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_game
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over_screen
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[a7]"></a>oled_draw_char</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, oled.o(.text.oled_draw_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = oled_draw_char &rArr; oled_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_pixel
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Font8
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_string
</UL>

<P><STRONG><a name="[7e]"></a>oled_draw_pixel</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, oled.o(.text.oled_draw_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oled_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_game_area
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_char
</UL>

<P><STRONG><a name="[6d]"></a>oled_draw_string</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, oled.o(.text.oled_draw_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = oled_draw_string &rArr; oled_draw_char &rArr; oled_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_char
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Font8
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_high_scores
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over_screen
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_score
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
</UL>

<P><STRONG><a name="[a6]"></a>oled_fill_display</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, oled.o(.text.oled_fill_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = oled_fill_display &rArr; oled_update_screen &rArr; oled_send_data &rArr; spi_master_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_update_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear_display
</UL>

<P><STRONG><a name="[a4]"></a>oled_init</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, oled.o(.text.oled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = oled_init &rArr; oled_clear_display &rArr; oled_fill_display &rArr; oled_update_screen &rArr; oled_send_data &rArr; spi_master_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_send_command
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear_display
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_pin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
</UL>

<P><STRONG><a name="[ac]"></a>oled_send_command</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, oled.o(.text.oled_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = oled_send_command &rArr; spi_master_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clear
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_update_screen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[ae]"></a>oled_send_data</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, oled.o(.text.oled_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = oled_send_data &rArr; spi_master_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clear
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_update_screen
</UL>

<P><STRONG><a name="[6c]"></a>oled_update_screen</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, oled.o(.text.oled_update_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = oled_update_screen &rArr; oled_send_data &rArr; spi_master_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_send_data
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_send_command
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_oled_buffer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oled_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over_screen
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_game_area
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_fill_display
</UL>

<P><STRONG><a name="[8e]"></a>reset_game</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, area.o(.text.reset_game))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = reset_game &rArr; oled_clear_display &rArr; oled_fill_display &rArr; oled_update_screen &rArr; oled_send_data &rArr; spi_master_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slider_value
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slider
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_score
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_level
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_last_slider_position
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_last_displayed_score
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gravitation
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_game_over
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_block
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear_display
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oled_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[94]"></a>rotate_block</STRONG> (Thumb, 276 bytes, Stack size 76 bytes, area.o(.text.rotate_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rotate_block
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_2
</UL>

<P><STRONG><a name="[66]"></a>self_calibration</STRONG> (Thumb, 152 bytes, Stack size 36 bytes, tsi.o(.text.self_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = self_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_Init
</UL>

<P><STRONG><a name="[5c]"></a>set_S2_press</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, klaw.o(.text.set_S2_press))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
</UL>

<P><STRONG><a name="[5e]"></a>set_S3_press</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, klaw.o(.text.set_S3_press))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_3
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
</UL>

<P><STRONG><a name="[5a]"></a>set_S4_press</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, klaw.o(.text.set_S4_press))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
</UL>

<P><STRONG><a name="[92]"></a>set_c_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, klaw.o(.text.set_c_time))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over_screen
</UL>

<P><STRONG><a name="[b1]"></a>set_current_block</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, area.o(.text.set_current_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_current_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_game
</UL>

<P><STRONG><a name="[73]"></a>set_game_area</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, area.o(.text.set_game_area))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_block
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lines
</UL>

<P><STRONG><a name="[b2]"></a>set_game_over</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.set_game_over))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawn_block_random
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_game
</UL>

<P><STRONG><a name="[6e]"></a>set_gravitation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text.set_gravitation))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_game
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_input_3
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
</UL>

<P><STRONG><a name="[bd]"></a>set_high_score</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text.set_high_score))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_high_scores
</UL>

<P><STRONG><a name="[b4]"></a>set_initialized</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.set_initialized))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawn_block_random
</UL>

<P><STRONG><a name="[7c]"></a>set_last_displayed_score</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.set_last_displayed_score))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_game
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_score
</UL>

<P><STRONG><a name="[99]"></a>set_last_slider_position</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.set_last_slider_position))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_game
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_touch_input
</UL>

<P><STRONG><a name="[70]"></a>set_level</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text.set_level))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_game
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
</UL>

<P><STRONG><a name="[6f]"></a>set_min_gravitation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(.text.set_min_gravitation))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choose_level
</UL>

<P><STRONG><a name="[b9]"></a>set_next_random_index</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.set_next_random_index))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawn_block_random
</UL>

<P><STRONG><a name="[77]"></a>set_oled_buffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, oled.o(.text.set_oled_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_oled_buffer
</UL>

<P><STRONG><a name="[b6]"></a>set_random_index</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.set_random_index))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawn_block_random
</UL>

<P><STRONG><a name="[76]"></a>set_score</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.set_score))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_game
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_score
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lines
</UL>

<P><STRONG><a name="[93]"></a>set_sec_OK</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, klaw.o(.text.set_sec_OK))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over_screen
</UL>

<P><STRONG><a name="[96]"></a>set_slider</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.set_slider))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_game
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_touch_input
</UL>

<P><STRONG><a name="[9a]"></a>set_slider_value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, area.o(.text.set_slider_value))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_game
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_touch_input
</UL>

<P><STRONG><a name="[82]"></a>spawn_block_random</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, area.o(.text.spawn_block_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spawn_block_random &rArr; check_collision
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_random_index
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_random_index
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_initialized
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_game_over
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random_index
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_random_index
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_initialized
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
</UL>

<P><STRONG><a name="[a3]"></a>spi_init</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, spi.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
</UL>

<P><STRONG><a name="[ad]"></a>spi_master_write</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spi.o(.text.spi_master_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_master_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_writeable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_send_data
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_send_command
</UL>

<P><STRONG><a name="[a5]"></a>start_game</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, game.o(.text.start_game))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = start_game &rArr;  start_game (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_loop
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_game
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_game
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>update_high_scores</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, menu.o(.text.update_high_scores))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_high_scores
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_score
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_score
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_over_screen
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_uidiv</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_ReadSlider
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_idiv</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text_divfast), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[bc]"></a>spi_readable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi.o(.text.spi_readable))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
</UL>

<P><STRONG><a name="[bb]"></a>spi_writeable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi.o(.text.spi_writeable))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
</UL>

<P><STRONG><a name="[64]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tsi.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_Init
</UL>

<P><STRONG><a name="[65]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tsi.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_Init
</UL>

<P><STRONG><a name="[63]"></a>__NVIC_SetPriority</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tsi.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_Init
</UL>

<P><STRONG><a name="[57]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, klaw.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Klaw_S2_4_Int
</UL>

<P><STRONG><a name="[58]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, klaw.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Klaw_S2_4_Int
</UL>

<P><STRONG><a name="[56]"></a>__NVIC_SetPriority</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, klaw.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Klaw_S2_4_Int
</UL>

<P><STRONG><a name="[5f]"></a>SysTick_Config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, menu.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;introduction
</UL>

<P><STRONG><a name="[60]"></a>__NVIC_SetPriority</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, menu.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[29]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[50]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[53]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[52]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[46]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[47]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
